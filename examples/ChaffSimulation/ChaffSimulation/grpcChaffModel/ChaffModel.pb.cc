// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChaffModel.proto

#include "ChaffModel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ChaffCreateRequest::ChaffCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maxrcs_)*/0
  , /*decltype(_impl_.t_c_)*/0
  , /*decltype(_impl_.t_if_)*/0
  , /*decltype(_impl_.t_ef_)*/0
  , /*decltype(_impl_.t_trend_)*/0
  , /*decltype(_impl_.creationtime_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChaffCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChaffCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChaffCreateRequestDefaultTypeInternal() {}
  union {
    ChaffCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChaffCreateRequestDefaultTypeInternal _ChaffCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR ResponseMessage::ResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responsemessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseMessageDefaultTypeInternal() {}
  union {
    ResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR ChaffInfoRequest::ChaffInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.simulationtime_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChaffInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChaffInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChaffInfoRequestDefaultTypeInternal() {}
  union {
    ChaffInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChaffInfoRequestDefaultTypeInternal _ChaffInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR ChaffInfo::ChaffInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rcs_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChaffInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChaffInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChaffInfoDefaultTypeInternal() {}
  union {
    ChaffInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChaffInfoDefaultTypeInternal _ChaffInfo_default_instance_;
static ::_pb::Metadata file_level_metadata_ChaffModel_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ChaffModel_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ChaffModel_2eproto = nullptr;

const uint32_t TableStruct_ChaffModel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _impl_.maxrcs_),
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _impl_.t_c_),
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _impl_.t_if_),
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _impl_.t_ef_),
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _impl_.t_trend_),
  PROTOBUF_FIELD_OFFSET(::ChaffCreateRequest, _impl_.creationtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResponseMessage, _impl_.responsemessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChaffInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChaffInfoRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ChaffInfoRequest, _impl_.simulationtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChaffInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChaffInfo, _impl_.rcs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChaffCreateRequest)},
  { 13, -1, -1, sizeof(::ResponseMessage)},
  { 20, -1, -1, sizeof(::ChaffInfoRequest)},
  { 28, -1, -1, sizeof(::ChaffInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ChaffCreateRequest_default_instance_._instance,
  &::_ResponseMessage_default_instance_._instance,
  &::_ChaffInfoRequest_default_instance_._instance,
  &::_ChaffInfo_default_instance_._instance,
};

const char descriptor_table_protodef_ChaffModel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ChaffModel.proto\"\200\001\n\022ChaffCreateReques"
  "t\022\n\n\002id\030\001 \001(\005\022\016\n\006maxRCS\030\002 \001(\001\022\013\n\003T_c\030\003 \001"
  "(\001\022\014\n\004T_if\030\004 \001(\001\022\014\n\004T_ef\030\005 \001(\001\022\017\n\007T_tren"
  "d\030\006 \001(\001\022\024\n\014CreationTime\030\007 \001(\001\"*\n\017Respons"
  "eMessage\022\027\n\017responseMessage\030\001 \001(\t\"6\n\020Cha"
  "ffInfoRequest\022\n\n\002id\030\001 \001(\005\022\026\n\016SimulationT"
  "ime\030\002 \001(\001\"\030\n\tChaffInfo\022\013\n\003RCS\030\001 \001(\0012q\n\nC"
  "haffModel\0224\n\013createChaff\022\023.ChaffCreateRe"
  "quest\032\020.ResponseMessage\022-\n\014getChaffInfo\022"
  "\021.ChaffInfoRequest\032\n.ChaffInfob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ChaffModel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ChaffModel_2eproto = {
    false, false, 398, descriptor_table_protodef_ChaffModel_2eproto,
    "ChaffModel.proto",
    &descriptor_table_ChaffModel_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_ChaffModel_2eproto::offsets,
    file_level_metadata_ChaffModel_2eproto, file_level_enum_descriptors_ChaffModel_2eproto,
    file_level_service_descriptors_ChaffModel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ChaffModel_2eproto_getter() {
  return &descriptor_table_ChaffModel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ChaffModel_2eproto(&descriptor_table_ChaffModel_2eproto);

// ===================================================================

class ChaffCreateRequest::_Internal {
 public:
};

ChaffCreateRequest::ChaffCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChaffCreateRequest)
}
ChaffCreateRequest::ChaffCreateRequest(const ChaffCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChaffCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maxrcs_){}
    , decltype(_impl_.t_c_){}
    , decltype(_impl_.t_if_){}
    , decltype(_impl_.t_ef_){}
    , decltype(_impl_.t_trend_){}
    , decltype(_impl_.creationtime_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.maxrcs_, &from._impl_.maxrcs_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.maxrcs_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:ChaffCreateRequest)
}

inline void ChaffCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maxrcs_){0}
    , decltype(_impl_.t_c_){0}
    , decltype(_impl_.t_if_){0}
    , decltype(_impl_.t_ef_){0}
    , decltype(_impl_.t_trend_){0}
    , decltype(_impl_.creationtime_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChaffCreateRequest::~ChaffCreateRequest() {
  // @@protoc_insertion_point(destructor:ChaffCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChaffCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChaffCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChaffCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChaffCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.maxrcs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.maxrcs_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChaffCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double maxRCS = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.maxrcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double T_c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.t_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double T_if = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.t_if_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double T_ef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.t_ef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double T_trend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.t_trend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double CreationTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.creationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChaffCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChaffCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double maxRCS = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxrcs = this->_internal_maxrcs();
  uint64_t raw_maxrcs;
  memcpy(&raw_maxrcs, &tmp_maxrcs, sizeof(tmp_maxrcs));
  if (raw_maxrcs != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_maxrcs(), target);
  }

  // double T_c = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_c = this->_internal_t_c();
  uint64_t raw_t_c;
  memcpy(&raw_t_c, &tmp_t_c, sizeof(tmp_t_c));
  if (raw_t_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_t_c(), target);
  }

  // double T_if = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_if = this->_internal_t_if();
  uint64_t raw_t_if;
  memcpy(&raw_t_if, &tmp_t_if, sizeof(tmp_t_if));
  if (raw_t_if != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_t_if(), target);
  }

  // double T_ef = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_ef = this->_internal_t_ef();
  uint64_t raw_t_ef;
  memcpy(&raw_t_ef, &tmp_t_ef, sizeof(tmp_t_ef));
  if (raw_t_ef != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_t_ef(), target);
  }

  // double T_trend = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_trend = this->_internal_t_trend();
  uint64_t raw_t_trend;
  memcpy(&raw_t_trend, &tmp_t_trend, sizeof(tmp_t_trend));
  if (raw_t_trend != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_t_trend(), target);
  }

  // double CreationTime = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationtime = this->_internal_creationtime();
  uint64_t raw_creationtime;
  memcpy(&raw_creationtime, &tmp_creationtime, sizeof(tmp_creationtime));
  if (raw_creationtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_creationtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChaffCreateRequest)
  return target;
}

size_t ChaffCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChaffCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double maxRCS = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxrcs = this->_internal_maxrcs();
  uint64_t raw_maxrcs;
  memcpy(&raw_maxrcs, &tmp_maxrcs, sizeof(tmp_maxrcs));
  if (raw_maxrcs != 0) {
    total_size += 1 + 8;
  }

  // double T_c = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_c = this->_internal_t_c();
  uint64_t raw_t_c;
  memcpy(&raw_t_c, &tmp_t_c, sizeof(tmp_t_c));
  if (raw_t_c != 0) {
    total_size += 1 + 8;
  }

  // double T_if = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_if = this->_internal_t_if();
  uint64_t raw_t_if;
  memcpy(&raw_t_if, &tmp_t_if, sizeof(tmp_t_if));
  if (raw_t_if != 0) {
    total_size += 1 + 8;
  }

  // double T_ef = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_ef = this->_internal_t_ef();
  uint64_t raw_t_ef;
  memcpy(&raw_t_ef, &tmp_t_ef, sizeof(tmp_t_ef));
  if (raw_t_ef != 0) {
    total_size += 1 + 8;
  }

  // double T_trend = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_trend = this->_internal_t_trend();
  uint64_t raw_t_trend;
  memcpy(&raw_t_trend, &tmp_t_trend, sizeof(tmp_t_trend));
  if (raw_t_trend != 0) {
    total_size += 1 + 8;
  }

  // double CreationTime = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationtime = this->_internal_creationtime();
  uint64_t raw_creationtime;
  memcpy(&raw_creationtime, &tmp_creationtime, sizeof(tmp_creationtime));
  if (raw_creationtime != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChaffCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChaffCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChaffCreateRequest::GetClassData() const { return &_class_data_; }


void ChaffCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChaffCreateRequest*>(&to_msg);
  auto& from = static_cast<const ChaffCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChaffCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maxrcs = from._internal_maxrcs();
  uint64_t raw_maxrcs;
  memcpy(&raw_maxrcs, &tmp_maxrcs, sizeof(tmp_maxrcs));
  if (raw_maxrcs != 0) {
    _this->_internal_set_maxrcs(from._internal_maxrcs());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_c = from._internal_t_c();
  uint64_t raw_t_c;
  memcpy(&raw_t_c, &tmp_t_c, sizeof(tmp_t_c));
  if (raw_t_c != 0) {
    _this->_internal_set_t_c(from._internal_t_c());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_if = from._internal_t_if();
  uint64_t raw_t_if;
  memcpy(&raw_t_if, &tmp_t_if, sizeof(tmp_t_if));
  if (raw_t_if != 0) {
    _this->_internal_set_t_if(from._internal_t_if());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_ef = from._internal_t_ef();
  uint64_t raw_t_ef;
  memcpy(&raw_t_ef, &tmp_t_ef, sizeof(tmp_t_ef));
  if (raw_t_ef != 0) {
    _this->_internal_set_t_ef(from._internal_t_ef());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_trend = from._internal_t_trend();
  uint64_t raw_t_trend;
  memcpy(&raw_t_trend, &tmp_t_trend, sizeof(tmp_t_trend));
  if (raw_t_trend != 0) {
    _this->_internal_set_t_trend(from._internal_t_trend());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_creationtime = from._internal_creationtime();
  uint64_t raw_creationtime;
  memcpy(&raw_creationtime, &tmp_creationtime, sizeof(tmp_creationtime));
  if (raw_creationtime != 0) {
    _this->_internal_set_creationtime(from._internal_creationtime());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChaffCreateRequest::CopyFrom(const ChaffCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChaffCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChaffCreateRequest::IsInitialized() const {
  return true;
}

void ChaffCreateRequest::InternalSwap(ChaffCreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChaffCreateRequest, _impl_.id_)
      + sizeof(ChaffCreateRequest::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ChaffCreateRequest, _impl_.maxrcs_)>(
          reinterpret_cast<char*>(&_impl_.maxrcs_),
          reinterpret_cast<char*>(&other->_impl_.maxrcs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChaffCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ChaffModel_2eproto_getter, &descriptor_table_ChaffModel_2eproto_once,
      file_level_metadata_ChaffModel_2eproto[0]);
}

// ===================================================================

class ResponseMessage::_Internal {
 public:
};

ResponseMessage::ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ResponseMessage)
}
ResponseMessage::ResponseMessage(const ResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responsemessage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.responsemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsemessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responsemessage().empty()) {
    _this->_impl_.responsemessage_.Set(from._internal_responsemessage(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ResponseMessage)
}

inline void ResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responsemessage_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.responsemessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsemessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseMessage::~ResponseMessage() {
  // @@protoc_insertion_point(destructor:ResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responsemessage_.Destroy();
}

void ResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responsemessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string responseMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_responsemessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ResponseMessage.responseMessage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string responseMessage = 1;
  if (!this->_internal_responsemessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsemessage().data(), static_cast<int>(this->_internal_responsemessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResponseMessage.responseMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_responsemessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponseMessage)
  return target;
}

size_t ResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string responseMessage = 1;
  if (!this->_internal_responsemessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsemessage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseMessage::GetClassData() const { return &_class_data_; }


void ResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseMessage*>(&to_msg);
  auto& from = static_cast<const ResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_responsemessage().empty()) {
    _this->_internal_set_responsemessage(from._internal_responsemessage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseMessage::CopyFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMessage::IsInitialized() const {
  return true;
}

void ResponseMessage::InternalSwap(ResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.responsemessage_, lhs_arena,
      &other->_impl_.responsemessage_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ChaffModel_2eproto_getter, &descriptor_table_ChaffModel_2eproto_once,
      file_level_metadata_ChaffModel_2eproto[1]);
}

// ===================================================================

class ChaffInfoRequest::_Internal {
 public:
};

ChaffInfoRequest::ChaffInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChaffInfoRequest)
}
ChaffInfoRequest::ChaffInfoRequest(const ChaffInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChaffInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.simulationtime_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.simulationtime_, &from._impl_.simulationtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.simulationtime_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:ChaffInfoRequest)
}

inline void ChaffInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.simulationtime_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChaffInfoRequest::~ChaffInfoRequest() {
  // @@protoc_insertion_point(destructor:ChaffInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChaffInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChaffInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChaffInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChaffInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.simulationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.simulationtime_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChaffInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double SimulationTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.simulationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChaffInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChaffInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double SimulationTime = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_simulationtime = this->_internal_simulationtime();
  uint64_t raw_simulationtime;
  memcpy(&raw_simulationtime, &tmp_simulationtime, sizeof(tmp_simulationtime));
  if (raw_simulationtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_simulationtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChaffInfoRequest)
  return target;
}

size_t ChaffInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChaffInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double SimulationTime = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_simulationtime = this->_internal_simulationtime();
  uint64_t raw_simulationtime;
  memcpy(&raw_simulationtime, &tmp_simulationtime, sizeof(tmp_simulationtime));
  if (raw_simulationtime != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChaffInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChaffInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChaffInfoRequest::GetClassData() const { return &_class_data_; }


void ChaffInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChaffInfoRequest*>(&to_msg);
  auto& from = static_cast<const ChaffInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChaffInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_simulationtime = from._internal_simulationtime();
  uint64_t raw_simulationtime;
  memcpy(&raw_simulationtime, &tmp_simulationtime, sizeof(tmp_simulationtime));
  if (raw_simulationtime != 0) {
    _this->_internal_set_simulationtime(from._internal_simulationtime());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChaffInfoRequest::CopyFrom(const ChaffInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChaffInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChaffInfoRequest::IsInitialized() const {
  return true;
}

void ChaffInfoRequest::InternalSwap(ChaffInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChaffInfoRequest, _impl_.id_)
      + sizeof(ChaffInfoRequest::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ChaffInfoRequest, _impl_.simulationtime_)>(
          reinterpret_cast<char*>(&_impl_.simulationtime_),
          reinterpret_cast<char*>(&other->_impl_.simulationtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChaffInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ChaffModel_2eproto_getter, &descriptor_table_ChaffModel_2eproto_once,
      file_level_metadata_ChaffModel_2eproto[2]);
}

// ===================================================================

class ChaffInfo::_Internal {
 public:
};

ChaffInfo::ChaffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChaffInfo)
}
ChaffInfo::ChaffInfo(const ChaffInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChaffInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rcs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rcs_ = from._impl_.rcs_;
  // @@protoc_insertion_point(copy_constructor:ChaffInfo)
}

inline void ChaffInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rcs_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChaffInfo::~ChaffInfo() {
  // @@protoc_insertion_point(destructor:ChaffInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChaffInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChaffInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChaffInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChaffInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rcs_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChaffInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double RCS = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChaffInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChaffInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double RCS = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rcs = this->_internal_rcs();
  uint64_t raw_rcs;
  memcpy(&raw_rcs, &tmp_rcs, sizeof(tmp_rcs));
  if (raw_rcs != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_rcs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChaffInfo)
  return target;
}

size_t ChaffInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChaffInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double RCS = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rcs = this->_internal_rcs();
  uint64_t raw_rcs;
  memcpy(&raw_rcs, &tmp_rcs, sizeof(tmp_rcs));
  if (raw_rcs != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChaffInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChaffInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChaffInfo::GetClassData() const { return &_class_data_; }


void ChaffInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChaffInfo*>(&to_msg);
  auto& from = static_cast<const ChaffInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChaffInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rcs = from._internal_rcs();
  uint64_t raw_rcs;
  memcpy(&raw_rcs, &tmp_rcs, sizeof(tmp_rcs));
  if (raw_rcs != 0) {
    _this->_internal_set_rcs(from._internal_rcs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChaffInfo::CopyFrom(const ChaffInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChaffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChaffInfo::IsInitialized() const {
  return true;
}

void ChaffInfo::InternalSwap(ChaffInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rcs_, other->_impl_.rcs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChaffInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ChaffModel_2eproto_getter, &descriptor_table_ChaffModel_2eproto_once,
      file_level_metadata_ChaffModel_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChaffCreateRequest*
Arena::CreateMaybeMessage< ::ChaffCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChaffCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ResponseMessage*
Arena::CreateMaybeMessage< ::ResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChaffInfoRequest*
Arena::CreateMaybeMessage< ::ChaffInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChaffInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChaffInfo*
Arena::CreateMaybeMessage< ::ChaffInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChaffInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
