// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ChaffModel.proto

#include "ChaffModel.pb.h"
#include "ChaffModel.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* ChaffModel_method_names[] = {
  "/ChaffModel/createChaff",
  "/ChaffModel/getChaffInfo",
};

std::unique_ptr< ChaffModel::Stub> ChaffModel::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChaffModel::Stub> stub(new ChaffModel::Stub(channel, options));
  return stub;
}

ChaffModel::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_createChaff_(ChaffModel_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getChaffInfo_(ChaffModel_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChaffModel::Stub::createChaff(::grpc::ClientContext* context, const ::ChaffCreateRequest& request, ::ResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChaffCreateRequest, ::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createChaff_, context, request, response);
}

void ChaffModel::Stub::async::createChaff(::grpc::ClientContext* context, const ::ChaffCreateRequest* request, ::ResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChaffCreateRequest, ::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createChaff_, context, request, response, std::move(f));
}

void ChaffModel::Stub::async::createChaff(::grpc::ClientContext* context, const ::ChaffCreateRequest* request, ::ResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createChaff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ResponseMessage>* ChaffModel::Stub::PrepareAsynccreateChaffRaw(::grpc::ClientContext* context, const ::ChaffCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ResponseMessage, ::ChaffCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createChaff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ResponseMessage>* ChaffModel::Stub::AsynccreateChaffRaw(::grpc::ClientContext* context, const ::ChaffCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateChaffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChaffModel::Stub::getChaffInfo(::grpc::ClientContext* context, const ::ChaffInfoRequest& request, ::ChaffInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChaffInfoRequest, ::ChaffInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getChaffInfo_, context, request, response);
}

void ChaffModel::Stub::async::getChaffInfo(::grpc::ClientContext* context, const ::ChaffInfoRequest* request, ::ChaffInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChaffInfoRequest, ::ChaffInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getChaffInfo_, context, request, response, std::move(f));
}

void ChaffModel::Stub::async::getChaffInfo(::grpc::ClientContext* context, const ::ChaffInfoRequest* request, ::ChaffInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getChaffInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChaffInfo>* ChaffModel::Stub::PrepareAsyncgetChaffInfoRaw(::grpc::ClientContext* context, const ::ChaffInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChaffInfo, ::ChaffInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getChaffInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChaffInfo>* ChaffModel::Stub::AsyncgetChaffInfoRaw(::grpc::ClientContext* context, const ::ChaffInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetChaffInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChaffModel::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChaffModel_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChaffModel::Service, ::ChaffCreateRequest, ::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChaffModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChaffCreateRequest* req,
             ::ResponseMessage* resp) {
               return service->createChaff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChaffModel_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChaffModel::Service, ::ChaffInfoRequest, ::ChaffInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChaffModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChaffInfoRequest* req,
             ::ChaffInfo* resp) {
               return service->getChaffInfo(ctx, req, resp);
             }, this)));
}

ChaffModel::Service::~Service() {
}

::grpc::Status ChaffModel::Service::createChaff(::grpc::ServerContext* context, const ::ChaffCreateRequest* request, ::ResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChaffModel::Service::getChaffInfo(::grpc::ServerContext* context, const ::ChaffInfoRequest* request, ::ChaffInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


